{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Author: Nidhi Sinha (ns4143 | N11884827)\
Requires python3 -> python3 ns4143HW3.py -t | -d | -test \
\
-t: The program trains on WSJ_23.pos and is tested on WSJ_24.words\
\
-d: The program trains on WSJ_02-21.pos and is tested on WSJ_24.words \
\
-test: The program trains on WSJ_24.pos, WSJ_02-21.pos and is tested on WSJ_23.words\
\
If these flags are specified, then no other arguments are needed. If you use custom input and output files go in the order of training file, test file, and then output file. \
\
ABOUT THE PROGRAM: \
I\'92ve used different dictionaries to store the necessary data.\
1) pos_num: number of occurrences of POS in corpus, \{POS:NUM\} \
2) word_pos_num: number of occurrences of word as POS in corpus, \{WORD:\{POS:NUM\}\}\
3) word_num: number of occurrences of word in corpus, \{WORD:NUM\} \
4) trans_dict: number of occurrences of POS following another POS, \{CURRENT_POS: \{NEXT_POS:COUNT, TOTAL_OCCURENCES: COUNT_2\}\} \
5) oov_num: OOV POS \
\
The program uses the training data to update the values in each dictionary and then calculates emission, transition and OOV frequencies. A counter tracks the number of tokens that occur less than the OOV_THRESHOLD. For testing, the program uses an array to read each word of a sentence into. The sentenceProcessor is the actual algorithm that calculates the score of each possible POS for any given token of the sentence and then stores the highest probability into the output. Then the labeled sentence with each token and its most likely POS is written to the output file. }